-- Program 1
A(x. ϵ)
B(x. ϵ)
∀x. x :: A => x :: Param
∀x. x :: B => x :: Param
Witness(x. x.choice :: Param)
Result(x. ϵ)
property(x. x :: Param): [y. y :: Witness, y.choice :: Param]
property(x. x :: A): [y. y :: Witness, y.choice :: Param] := new Witness(choice ≡ new A())
property(x. x :: B): [y. y :: Witness, y.choice :: Param] := new Witness(choice ≡ new B())
m(x. x :: Witness, x.choice :: A): [y. y :: Result]
m(x. x :: Witness, x.choice :: A): [y. y :: Result] := new Result()

m(property(new A))   -- doesnt typecheck
m(property(new B))   -- doesnt typecheck





-- Program 2
A(x. ϵ)
B(x. ϵ)
∀x. x :: A => x :: Param
∀x. x :: B => x :: Param
Witness(x. x.choice :: Param)
None(x. ϵ)
Result(x. ϵ)
∀x. x :: None => x :: Option
∀x. x :: Result => x :: Option
property(x. x :: Param): [y. y :: Witness, y.choice :: Param]
property(x. x :: A): [y. y :: Witness, y.choice :: Param] := new Witness(choice ≡ new A())
property(x. x :: B): [y. y :: Witness, y.choice :: Param] := new Witness(choice ≡ new B())
m(x. x :: Witness, x.choice :: Param): [y. y :: Option]
m(x. x :: Witness, x.choice :: A): [y. y :: Option] := new Result()
m(x. x :: Witness, x.choice :: B): [y. y :: Option] := new None()

m(property(new A))   -- does typecheck
                     -- [y. y :: Option]
m(property(new B))   -- does typecheck
                     -- [y. y :: Option]




-- Program 3
A(x. ϵ)
B(x. ϵ)
∀x. x :: A => x :: Param
∀x. x :: B => x :: Param
WitnessT(x. ϵ)
WitnessF(x. ϵ)
∀x. x :: WitnessT => x :: Witness
∀x. x :: WitnessF => x :: Witness
Result(x. ϵ)
property(x. x :: Param): [y. y :: Witness]
property(x. x :: A): [y. y :: Witness] := new WitnessT()
property(x. x :: B): [y. y :: Witness] := new WitnessF()
m(x. x :: WitnessT): [y. y :: Result]
m(x. x :: WitnessT): [y. y :: Result] := new Result()

m(property(new A))   -- doesnt typecheck
m(property(new B))   -- doesnt typecheck





-- change return type of 'property' implementations in program
A(x. ϵ)
B(x. ϵ)
∀x. x :: A => x :: Param
∀x. x :: B => x :: Param
Witness(x. x.choice :: Param)
Result(x. ϵ)
property(x. x :: Param): [y. y :: Witness, y.choice :: Param]
property(x. x :: A): [y. y :: Witness, y.choice :: A] := new Witness(choice ≡ new A())
property(x. x :: B): [y. y :: Witness, y.choice :: B] := new Witness(choice ≡ new B())
m(x. x :: Witness, x.choice :: A): [y. y :: Result]
m(x. x :: Witness, x.choice :: A): [y. y :: Result] := new Result()

-- change program checking s.t. it doesn't require all declarations of the same method to have the same return type
-- method call checking using the return type of the most specific applicable method
m(property(new A))   -- does typecheck
                     -- [y. y :: Result]
m(property(new B))   -- doesnt typecheck





-- keep programs as the whereabove
-- method call checking using the type of the body of the most specific applicable method

-- for program 1
m(property(new A))   -- does typecheck
                     -- [y. y.cls=Result]
m(property(new B))   -- doesnt typecheck

-- for program 2
m(property(new A))   -- does typecheck
                     -- [y. y.cls=Result]
m(property(new B))   -- does typecheck
                     -- [y. y.cls=None]

-- for program 3
m(property(new A))   -- does typecheck
                     -- [y. y.cls=Result]
m(property(new B))   -- doesnt typecheck





-- limitation: recursive properties
A(x. ϵ)
B(x. ϵ)
∀x. x :: A => x :: Param
∀x. x :: B => x :: Param
Nil(x. x.data :: Param)
Cons(x. x.tl :: List)
∀x. x :: Nil, x.data :: Param => x :: List
∀x. x :: Cons, x.tl :: List => x :: List
Witness(x. x.choice :: Param)
Result(x. ϵ)
property(x. x :: List): [y. y :: Witness, y.choice :: Param]
property(x. x :: Nil, x.data :: A): [y. y :: Witness, y.choice :: Param] := new Witness(choice ≡ new A())
property(x. x :: Nil, x.data :: B): [y. y :: Witness, y.choice :: Param] := new Witness(choice ≡ new B())
property(x. x :: Cons, x.tl :: List): [y. y :: Witness, y.choice :: Param] := property(x.tl)
m(x. x :: Witness, x.choice :: A): [y. y :: Result]
m(x. x :: Witness, x.choice :: A): [y. y :: Result] := new Result()

m(property(Nil(A)))        -- does typecheck
m(property(Nil(B)))        -- doesnt typecheck
m(property(Cons(Nil(B))))  -- 






A(x. ϵ)
B(x. ϵ)
∀x. x :: A => x :: Param
∀x. x :: B => x :: Param
Nil(x. ϵ)
Cons(x. x.hd :: Param, x.tl :: List)
∀x. x :: Nil => x :: List
∀x. x :: Cons, x.hd :: Param, x.tl :: List => x :: List
Witness(x. x.choice :: Param)
Result(x. ϵ)
property(x. x :: List): [y. y :: Witness, y.choice :: Param]
property(x. x :: Nil): [y. y :: Witness, y.choice :: A] := new Witness(choice ≡ new A())
property(x. x :: Cons, x.hd :: A, x.tl :: Nil): [y. y :: Witness, y.choice :: A] := new Witness(choice ≡ new A())
property(x. x :: Cons, x.hd :: B, x.tl :: Nil): [y. y :: Witness, y.choice :: B] := new Witness(choice ≡ new B())
property(x. x :: Cons, x.hd :: Param, x.tl :: Cons): [y. y :: Witness, y.choice :: Param] := property(x.tl)
m(x. x :: Witness, x.choice :: A): [y. y :: Result]
m(x. x :: Witness, x.choice :: A): [y. y :: Result] := new Result()

m(property(Nil))        -- does typecheck
m(property(A::Nil))     -- does typecheck
m(property(B::Nil))     -- doesnt typecheck
m(property(A::B::Nil))  -- doesnt typecheck
m(property(B::A::Nil))  -- doesnt typecheck (with changed return types in the program)
