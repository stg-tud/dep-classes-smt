(set-option :produce-unsat-cores true)
(declare-datatype Class ((Zero) (Nat) (Succ)))
(declare-datatype Variable ((x) (a) (c) (b)))
(declare-datatype Field ((p)))
(declare-datatype Path ((var (id Variable)) (pth (obj Path) (field Field))))
(define-fun instantiated-by ((path-p Path) (class-c Class)) Bool false)
(declare-fun instance-of (Path Class) Bool)
(define-fun path-equivalence ((path-p Path) (path-q Path)) Bool (or (= path-p path-q) (or (and (= path-p (var a)) (= path-q (var b))) (or (and (= path-p (var b)) (= path-q (var a))) (or (and (= path-p (var a)) (= path-q (var a))) (or (and (= path-p (var b)) (= path-q (var b))) false))))))
(define-fun-rec substitute ((path-p Path) (var-x Variable) (path-q Path)) Path (ite (is-var path-p) (ite (= var-x (id path-p)) path-q path-p) (pth (substitute (obj path-p) var-x path-q) (field path-p))))
(assert (! (forall ((path-p Path)) (path-equivalence path-p path-p)) :named C-Refl))
(assert (! (forall ((cs-a Bool) (path-p Path) (class-c Class)) (=> (=> cs-a (instantiated-by path-p class-c)) (=> cs-a (instance-of path-p class-c)))) :named C-Class))
(assert (! (forall ((cs-a Bool) (path-p Path) (path-q Path) (path-r Path) (path-s Path) (var-x Variable)) (=> (and (=> cs-a (path-equivalence (substitute path-p var-x path-r) (substitute path-q var-x path-r))) (=> cs-a (path-equivalence path-s path-r))) (=> cs-a (path-equivalence (substitute path-p var-x path-s) (substitute path-q var-x path-s))))) :named C-Subst-PathEq))
(assert (! (forall ((cs-a Bool) (path-p Path) (class-c Class) (path-r Path) (path-s Path) (var-x Variable)) (=> (and (=> cs-a (instance-of (substitute path-p var-x path-r) class-c)) (=> cs-a (path-equivalence path-s path-r))) (=> cs-a (instance-of (substitute path-p var-x path-s) class-c)))) :named C-Subst-InstOf))
(assert (! (forall ((cs-a Bool) (path-p Path) (class-c Class) (path-r Path) (path-s Path) (var-x Variable)) (=> (and (=> cs-a (instantiated-by (substitute path-p var-x path-r) class-c)) (=> cs-a (path-equivalence path-s path-r))) (=> cs-a (instantiated-by (substitute path-p var-x path-s) class-c)))) :named C-Subst-InstBy))
(assert (! (forall ((cs-a Bool) (path-p Path)) (=> (=> cs-a (instance-of path-p Zero)) (=> cs-a (instance-of path-p Nat)))) :named C-Prog-Zero))
(assert (! (forall ((cs-a Bool) (path-p Path)) (=> (=> cs-a (and (instance-of path-p Succ) (instance-of (substitute (pth (var x) p) x path-p) Nat))) (=> cs-a (instance-of path-p Nat)))) :named C-Prog-Succ))
(assert (not (=> (path-equivalence (var a) (var b)) (path-equivalence (var a) (var c)))))
(check-sat)
(get-unsat-core)
